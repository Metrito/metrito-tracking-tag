!async function(){function t(t){const e=new Uint32Array(4);crypto.getRandomValues(e);return`${t}_${Array.from(e,(t=>t.toString(36))).join("")}`}console.log("Tracking initialized with container:",window.location.host);class e{static error(...t){console.error("[ERROR] Tracking:",...t)}static info(...t){console.log("[INFO] Tracking:",...t)}}class a{static setItem(t,e){localStorage.setItem(t,e)}static getItem(t){return localStorage.getItem(t)}static setJsonItem(t,e){localStorage.setItem(t,JSON.stringify(e))}static getJsonItem(t){const e=localStorage.getItem(t);return e?JSON.parse(e):null}}class o{constructor(t){this.leadId=t,this.utmParams=this.extractUTMs()}extractUTMs(){const t=new URLSearchParams(window.location.search),a={};return["utm_source","utm_medium","utm_campaign","utm_content","utm_term"].forEach((e=>{t.has(e)&&(a[e]=t.get(e))})),e.info("Extracted UTM parameters:",a),a}addUTMsAndLeadIdToUrl(t){const e=new URLSearchParams(window.location.search);e.has("lead_id")||e.set("lead_id",this.leadId);for(const[t,a]of Object.entries(this.utmParams))e.has(t)||e.set(t,a);return`${t.split("?")[0]}?${e.toString()}`}updateUrl(){const t=this.addUTMsAndLeadIdToUrl(window.location.href);window.history.replaceState({path:t},"",t),e.info("Updated URL with UTM parameters and lead_id:",t)}}const n=new class{constructor(){this.containerDomain=window.location.host,this.backendUrl="https://tracking.metrito.com",this.ipInfoToken="BB9F053F0108613A9CCD7D8DF0B21A47"}async init(){this.leadId=await this.getOrCreateLeadId(),this.utmHandler=new o(this.leadId),this.utmHandler.updateUrl(),this.trackPageView()}async createLead(t){const o=await this.getGeolocation(),{fbc:n,fbp:i}=this.getFacebookCookies(),r={domain:window.location.hostname,createdInUrl:window.location.href,leadId:t,containerDomain:this.containerDomain,geolocation:{...o,state:o.region},metaAds:{cookies:{fbc:n,fbp:i}}};try{const t=await fetch(`${this.backendUrl}/leads`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!t.ok)throw new Error(`Failed to create lead: ${t.statusText}`);e.info("Lead successfully created",r),a.setJsonItem("geolocation",o)}catch(t){e.error("Error creating lead:",t)}}async getOrCreateLeadId(){let o=a.getItem("lead_id");return o?e.info("Existing lead ID retrieved:",o):(o=t("lead"),a.setItem("lead_id",o),e.info("New lead ID generated:",o),await this.createLead(o)),o}getFacebookCookies(){const t=document.cookie.split("; ").reduce(((t,e)=>{const[a,o]=e.split("=");return t[a]=o,t}),{});return{fbc:t._fbc||null,fbp:t._fbp||null}}async getGeolocation(){let t=a.getJsonItem("geolocation");if(t)e.info("Geolocation retrieved from localStorage:",t);else try{const a=await fetch(`https://ipinfo.io/json?key=${this.ipInfoToken}`);t=await a.json(),e.info("Geolocation retrieved:",t)}catch(t){return e.error("Error retrieving geolocation:",t),{}}return t}async trackEvent(a,o){const n=navigator.userAgent,{fbc:i,fbp:r}=this.getFacebookCookies(),s=await this.getGeolocation(),c={leadId:this.leadId,eventType:a,eventData:o,eventId:t("event"),eventName:"page_view",eventTime:(new Date).getTime(),timestamp:(new Date).toISOString(),page:window.location.href,containerDomain:this.containerDomain,metadata:{userAgent:n,geolocation:{...s,state:s.region},...this.utmHandler.utmParams},metaAds:{cookies:{fbc:i,fbp:r}}};e.info(`Tracking event: ${a}`,c),await this.sendEventToBackend(c)}async sendEventToBackend(t){try{const a=await fetch(`${this.backendUrl}/events`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!a.ok)throw new Error(`Failed to send event data: ${a.statusText}`);e.info("Event data successfully sent to backend",t)}catch(t){e.error("Error sending event data to backend:",t)}}trackPageView(){this.trackEvent("page_view",{url:window.location.href})}}(this.containerDomain);await n.init()}();